# bot.py
# English tutor (text-only) for Kyrgyz speakers.
# UI: –∫—ã—Ä–≥—ã–∑—á–∞ —Ç“Ø—à“Ø–Ω–¥“Ø—Ä–º”© –∂–∞–Ω–∞ –º–µ–Ω—é, –º–∏—Å–∞–ª–¥–∞—Ä/—Ç–∞–ø—à—ã—Ä–º–∞–ª–∞—Ä –∞–Ω–≥–ª–∏—Å—á–µ.
# Requires: python-telegram-bot==20.3, openai>=1.30, python-dotenv
# ENV: TELEGRAM_BOT_TOKEN, OPENAI_API_KEY

import os, json, time
from pathlib import Path
from typing import Dict, Any, Tuple, List

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# -------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∂–∞–Ω–∞ —Ñ–∞–π–ª–¥–∞—Ä --------------------
LEVELS: List[str] = [
    "Beginner", "Elementary", "Pre-Intermediate",
    "Intermediate", "Upper-Intermediate", "Advanced"
]
DATA_DIR = Path("data")
DATA_DIR.mkdir(exist_ok=True)
USERS_DB = DATA_DIR / "users.json"

# –¢—É—Ç–æ—Ä–¥—É–Ω —Å—Ç–∏–ª–∏: –∫—ã—Ä–≥—ã–∑—á–∞ –º–µ—Ç–∞-–Ω—É—Å–∫–∞–º–∞, –∞–Ω–≥–ª–∏—Å—á–µ –º–∞–∑–º—É–Ω
SYSTEM_STYLE = (
    "–°–µ–Ω 'Chatty' –∞—Ç—Ç—É—É –∂—ã–ª—É—É, –¥–æ—Å—Ç—É–∫ –º“Ø–Ω”©–∑–¥”©–≥“Ø –∞–Ω–≥–ª–∏—Å —Ç–∏–ª–∏ –º—É–≥–∞–ª–∏–º–∏—Å–∏–∑.\n"
    "–ë–∞–∞—Ä–¥—ã–∫ —Ç“Ø—à“Ø–Ω–¥“Ø—Ä–º”©–Ω“Ø –∂–∞–Ω–∞ –Ω—É—Å–∫–∞–º–∞–Ω—ã –ö–´–†–ì–´–ó –¢–ò–õ–ò–ù–î–ï –±–µ—Ä.\n"
    "–î–∏–∞–ª–æ–≥–¥–æ—Ä, –º–∏—Å–∞–ª–¥–∞—Ä, —Å”©–∑ –∞–π–∫–∞—à—Ç–∞—Ä—ã –∂–∞–Ω–∞ —Ç–∞–ø—à—ã—Ä–º–∞–ª–∞—Ä–¥—ã–Ω —Ç–µ–∫—Å—Ç–∏–Ω –ê–ù–ì–õ–ò–° –¢–ò–õ–ò–ù–î–ï –∂–∞–∑.\n"
    "–ö—ã—Å–∫–∞, —Ç“Ø—à“Ø–Ω“Ø–∫—Ç“Ø“Ø, –ø—Ä–∞–∫—Ç–∏–∫–∞–ª—ã–∫ –±–æ–ª. –†–æ–±–æ—Ç —Å—ã–º–∞–ª —Å“Ø–π–ª”©–±”© ‚Äî –∂–∞–Ω–¥—É—É —Å“Ø–π–ª”©”© –∫–æ–ª–¥–æ–Ω.\n"
    "–ö–∞—Ç–∞–ª–∞—Ä–¥—ã –Ω–∞–∑–∏–∫ –æ“£–¥–æ–ø, 1‚Äì2 —Ç–∞–∫ –º–∏—Å–∞–ª –±–µ—Ä. –ê—Ä –∫–∞–¥–∞–º–¥–∞ 1‚Äì2 –≥–∞–Ω–∞ —Ç–∞–ø—à—ã—Ä–º–∞.\n"
    "–¢–µ–º–∞ –∞–ª–º–∞—à—Ç—ã—Ä–±–∞–π–±—ã–∑: –º–∞–∫—Å–∞—Ç ‚Äî –∞–Ω–≥–ª–∏—Å —Ç–∏–ª–∏–Ω “Ø–π—Ä”©—Ç“Ø“Ø. –ë–∞—à–∫–∞ —Ç–µ–º–∞–ª–∞—Ä–≥–∞ –∂–æ–æ–ø –±–µ—Ä–±–µ."
)

# -------------------- –ñ”©–Ω”©–∫”©–π JSON —Å–∞–∫—Ç–∞–≥—ã—á --------------------
def load_db() -> Dict[str, Any]:
    if USERS_DB.exists():
        try:
            return json.loads(USERS_DB.read_text(encoding="utf-8"))
        except Exception:
            return {}
    return {}

def save_db(db: Dict[str, Any]) -> None:
    tmp = USERS_DB.with_suffix(".tmp")
    tmp.write_text(json.dumps(db, ensure_ascii=False, indent=2), encoding="utf-8")
    tmp.replace(USERS_DB)

DB = load_db()  # { user_id: {level, goals, streak, last_lesson_ts, pending_task, history} }

def userc(user_id: int) -> Dict[str, Any]:
    sid = str(user_id)
    if sid not in DB:
        DB[sid] = {
            "level": None,       # "Beginner" –∂.–±.
            "goals": [],         # ["speaking", "grammar"] –∂.–±.
            "streak": 0,         # –∫–∞–Ω—á–∞ —Ç–∞–ø—à—ã—Ä–º–∞ –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø —Ç–µ–∫—à–µ—Ä–∏–ª–¥–∏
            "last_lesson_ts": 0, # –∞–∫—ã—Ä–∫—ã /lesson —É–±–∞–∫—Ç—ã—Å—ã
            "pending_task": None, # {"task": ..., "key": ...}
            "history": []        # –∞–∫—ã—Ä–∫—ã 20 –±–∏–ª–¥–∏—Ä“Ø“Ø (–∫–æ–Ω—Ç–µ–∫—Å—Ç “Ø—á“Ø–Ω)
        }
    return DB[sid]

# -------------------- OpenAI --------------------
from openai import OpenAI
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

async def gpt(messages, model="gpt-4o-mini", max_tokens=500) -> str:
    """–ñ–æ–æ–ø —Ç–µ–∫—Å—Ç–∏–Ω–µ –≥–∞–Ω–∞ –º—É–∫—Ç–∞–∂–±—ã–∑."""
    resp = client.chat.completions.create(
        model=model,
        messages=messages,
        temperature=0.7,
        max_tokens=max_tokens,
    )
    return resp.choices[0].message.content.strip()

def tutor_messages(level: str, goals: list, history: list, user_prompt: str, mode_hint: str = ""):
    """–¢—É—Ç–æ—Ä “Ø—á“Ø–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç“Ø–∑“Ø“Ø."""
    level_str = level or "not set"
    goals_str = ", ".join(goals) if goals else "none"
    sys = (
        f"{SYSTEM_STYLE}\n"
        f"–°—Ç—É–¥–µ–Ω—Ç—Ç–∏–Ω –¥–µ“£–≥—ç—ç–ª–∏: {level_str}.\n"
        f"–°—Ç—É–¥–µ–Ω—Ç—Ç–∏–Ω –º–∞–∫—Å–∞—Ç—Ç–∞—Ä—ã: {goals_str}.\n"
        f"{mode_hint}"
    )
    msgs = [{"role": "system", "content": sys}]
    for role, text in history[-12:]:
        msgs.append({"role": role, "content": text})
    msgs.append({"role": "user", "content": user_prompt})
    return msgs

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞/–ú–µ–Ω—é --------------------
def level_keyboard() -> InlineKeyboardMarkup:
    rows, row = [], []
    for i, lvl in enumerate(LEVELS, 1):
        row.append(InlineKeyboardButton(lvl, callback_data=f"level|{lvl}"))
        if i % 2 == 0:
            rows.append(row); row = []
    if row: rows.append(row)
    return InlineKeyboardMarkup(rows)

def yesno_keyboard(cb_yes: str, cb_no: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û–æ–±–∞", callback_data=cb_yes),
         InlineKeyboardButton("–ñ–æ–∫", callback_data=cb_no)]
    ])

def menu_text(u: Dict[str, Any]) -> str:
    lvl = u.get("level") or "‚Äî –∫–æ—é–ª–∞ —ç–ª–µ–∫ ‚Äî"
    goals = ", ".join(u.get("goals", [])) or "–∂–æ–∫"
    streak = int(u.get("streak", 0))
    return (
        "üìã *–ú–µ–Ω—é*\n"
        f"‚Ä¢ –î–µ“£–≥—ç—ç–ª–∏“£–∏–∑: *{lvl}*\n"
        f"‚Ä¢ –ú–∞–∫—Å–∞—Ç—Ç–∞—Ä: *{goals}*\n"
        f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å (—Ç–∞–ø—à—ã—Ä–º–∞ —Å–∞–Ω—ã): *{streak}*\n\n"
        "–ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä:\n"
        "‚Ä¢ /setlevel ‚Äî –¥–µ“£–≥—ç—ç–ª —Ç–∞–Ω–¥–æ–æ\n"
        "‚Ä¢ /goals ‚Äî –º–∞–∫—Å–∞—Ç—Ç–∞—Ä–¥—ã –∫–æ—é—É (–º–∏—Å: speaking, grammar)\n"
        "‚Ä¢ /lesson ‚Äî –∂–∞“£—ã –∫—ã—Å–∫–∞ —Å–∞–±–∞–∫ + 1 —Ç–∞–ø—à—ã—Ä–º–∞\n"
        "‚Ä¢ /repeat ‚Äî –∞–∫—ã—Ä–∫—ã —Ç–∞–ø—à—ã—Ä–º–∞–Ω—ã –∫–∞–π—Ä–∞ –∫”©—Ä“Ø“Ø\n"
        "‚Ä¢ /reset ‚Äî –±–∞—Ä–¥—ã–∫ –º–∞–∞–ª—ã–º–∞—Ç—Ç—ã —Ç–∞–∑–∞–ª–æ–æ\n"
        "‚Ä¢ /menu ‚Äî –º–µ–Ω—é–Ω—É –∫”©—Ä—Å”©—Ç“Ø“Ø\n"
    )

# -------------------- –°–∞–±–∞–∫/–¢–∞–ø—à—ã—Ä–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è—Å—ã --------------------
async def build_intro_lesson(level: str) -> str:
    """–ö—ã—Å–∫–∞ –∂—ã–ª—É—É –∫–∏—Ä–∏—à —Å”©–∑ + –∞–Ω–≥–ª–∏—Å—á–µ –º–∞—Ç–µ—Ä–∏–∞–ª."""
    prompt = (
        "–ë–∞—Ä–¥—ã–∫ —Ç“Ø—à“Ø–Ω–¥“Ø—Ä–º”©/–º–µ—Ç–∞-–Ω—É—Å–∫–∞–º–∞ –ö–´–†–ì–´–ó –¢–ò–õ–ò–ù–î–ï –±–æ–ª—Å—É–Ω. "
        "–°–∞–±–∞–∫—Ç—ã–Ω –º–∞–∑–º—É–Ω—É (–¥–∏–∞–ª–æ–≥, –º–∏—Å–∞–ª–¥–∞—Ä, —Ç–∞–ø—à—ã—Ä–º–∞ —Ç–µ–∫—Å—Ç—Ç–µ—Ä–∏) –ê–ù–ì–õ–ò–° –¢–ò–õ–ò–ù–î–ï.\n"
        f"Create a short warm-up for a {level} learner:\n"
        "- a 3‚Äì4 line mini-dialogue to read and imitate\n"
        "- 3 focused items (grammar/vocab/pronunciation) with 1-line tips\n"
        "- keep it friendly and concise"
    )
    return await gpt(
        [{"role": "system", "content": SYSTEM_STYLE}, {"role": "user", "content": prompt}],
        max_tokens=450
    )

async def build_task(level: str, goals: list) -> Tuple[str, str]:
    """
    –ë–∏—Ä —ç–ª–µ —Ç–∞–ø—à—ã—Ä–º–∞ —Ç“Ø–∑”©—Ç. –ö–∞–π—Ç–∞—Ä–∞—Ç: (—Ç–∞–ø—à—ã—Ä–º–∞ —Ç–µ–∫—Å—Ç/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞–Ω–≥–ª–∏—Å—á–µ, —Ç–µ–∫—à–µ—Ä“Ø“Ø “Ø—á“Ø–Ω –∫—ã—Å–∫–∞ –∞—á–∫—ã—á).
    """
    goals_text = ", ".join(goals) if goals else "general English"
    prompt = (
        "–ú–µ—Ç–∞-–Ω—É—Å–∫–∞–º–∞ –ö–´–†–ì–´–ó –¢–ò–õ–ò–ù–î–ï, –±–∏—Ä–æ–∫ —Ç–∞–ø—à—ã—Ä–º–∞ —Ç–µ–∫—Å—Ç–∏–Ω –∞–Ω–≥–ª–∏—Å—á–µ –±–µ—Ä.\n"
        f"Design ONE short exercise for a {level} learner focused on {goals_text}.\n"
        "Output in TWO PARTS exactly:\n"
        "---TASK---\n"
        "<one concise instruction in ENGLISH; student's answer fits in 1‚Äì3 lines>\n"
        "---KEY---\n"
        "<ideal answer or checklist for the tutor>"
    )
    out = await gpt(
        [{"role": "system", "content": SYSTEM_STYLE}, {"role": "user", "content": prompt}],
        max_tokens=500
    )
    task, key = "", ""
    if "---TASK---" in out and "---KEY---" in out:
        _, rest = out.split("---TASK---", 1)
        task_part, key_part = rest.split("---KEY---", 1)
        task = task_part.strip()
        key = key_part.strip()
    else:
        task = out.strip()
        key = "No formal key; judge clarity, grammar, relevance."
    return task, key

async def check_answer(level: str, task: str, key: str, answer: str) -> str:
    """–ö—ã—Ä–≥—ã–∑—á–∞ –∫—ã—Å–∫–∞ –ø–∏–∫–∏—Ä."""
    prompt = (
        "–ë–∞–∞–ª–æ–æ–Ω—É –ö–´–†–ì–´–ó –¢–ò–õ–ò–ù–î–ï –∂–∞–∑. –°—Ç—É–¥–µ–Ω—Ç—Ç–∏–Ω –∂–æ–æ–±—É –∞–Ω–≥–ª–∏—Å—á–µ.\n"
        f"Student level: {level}\n\n"
        f"Task (EN):\n{task}\n\n"
        f"Answer key (EN):\n{key}\n\n"
        f"Student answer (EN):\n{answer}\n\n"
        "–ö—ã—Å–∫–∞ –ø–∏–∫–∏—Ä (5 —Å–∞–ø–∫–∞ —á–µ–π–∏–Ω):\n"
        "- —Ç—É—É—Ä–∞–ª—ã–≥—ã (‚úÖ/‚ö†Ô∏è/‚ùå) –∂–∞–Ω–∞ 1 —Å–µ–±–µ–±–∏\n"
        "- 1‚Äì2 –º–∞–π–¥–∞ –æ“£–¥–æ–æ (–º–∏—Å–∞–ª –º–µ–Ω–µ–Ω)\n"
        "- –∫–∏–π–∏–Ω–∫–∏ –∫–∏—á–∏–Ω–µ —Ç–∞–ø—à—ã—Ä–º–∞ –±–æ—é–Ω—á–∞ —Å—É–Ω—É—à"
    )
    return await gpt(
        [{"role": "system", "content": SYSTEM_STYLE}, {"role": "user", "content": prompt}],
        max_tokens=350
    )

# -------------------- –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä --------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = userc(update.effective_user.id)
    if not u["level"]:
        await update.message.reply_text(
            "–°–∞–ª–∞–º! –ê–ª–≥–∞—á –¥–µ“£–≥—ç—ç–ª–∏“£–∏–∑–¥–∏ —Ç–∞–Ω–¥–∞–ø –∞–ª–∞–ª—ã:", reply_markup=level_keyboard()
        )
    else:
        await update.message.reply_text(
            "–ö–∞–π—Ä–∞ –∫–æ—à –∫–µ–ª–∏“£–∏–∑! –¢”©–º”©–Ω–∫“Ø –º–µ–Ω—é–¥–∞–Ω —Ç–∞–Ω–¥–∞“£—ã–∑:\n\n" + menu_text(u),
            parse_mode="Markdown"
        )

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = userc(update.effective_user.id)
    await update.message.reply_text(menu_text(u), parse_mode="Markdown")

async def setlevel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ“£–≥—ç—ç–ª–∏“£–∏–∑–¥–∏ —Ç–∞–Ω–¥–∞“£—ã–∑:", reply_markup=level_keyboard())

async def on_level_pick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, lvl = q.data.split("|", 1)
    u = userc(q.from_user.id)
    u["level"] = lvl
    save_db(DB)
    await q.edit_message_text(f"–î–µ“£–≥—ç—ç–ª–∏“£–∏–∑ –∫–æ—é–ª–¥—É: *{lvl}* ‚úÖ", parse_mode="Markdown")
    await q.message.reply_text(
        "–ú–∞–∫—Å–∞—Ç—Ç–∞—Ä–¥—ã –∫–æ—ë—Å—É–∑–±—É? (–º–∏—Å–∞–ª—ã: speaking, grammar, travel)",
        reply_markup=yesno_keyboard("goals|yes", "goals|no")
    )

async def on_goals_yesno(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, ans = q.data.split("|", 1)
    if ans == "yes":
        await q.edit_message_text("–ú–∞–∫—Å–∞—Ç—Ç–∞—Ä—ã“£—ã–∑–¥—ã “Ø—Ç“Ø—Ä –º–µ–Ω–µ–Ω –∂–∞–∑—ã“£—ã–∑. –ú–∏—Å: speaking, travel, pronunciation")
        context.user_data["awaiting_goals"] = True
    else:
        await q.edit_message_text("–ú–∞–∫—Å–∞—Ç—Ç–∞—Ä–¥—ã –∫–∏–π–∏–Ω /goals –∞—Ä–∫—ã–ª—É—É –∫–æ—é—É–≥–∞ –±–æ–ª–æ—Ç.\n/lesson –º–µ–Ω–µ–Ω –±–∞—à—Ç–∞–π –±–µ—Ä–∏“£–∏–∑.")
        # –º–µ–Ω—é –∫”©—Ä—Å”©—Ç
        u = userc(q.from_user.id)
        await q.message.reply_text(menu_text(u), parse_mode="Markdown")

async def goals_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    userc(update.effective_user.id)  # ensure
    await update.message.reply_text("–ú–∞–∫—Å–∞—Ç—Ç–∞—Ä—ã“£—ã–∑–¥—ã “Ø—Ç“Ø—Ä –º–µ–Ω–µ–Ω –∂–∞–∑—ã“£—ã–∑. –ú–∏—Å: speaking, grammar, business email")
    context.user_data["awaiting_goals"] = True

async def lesson_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = userc(update.effective_user.id)
    if not u["level"]:
        await update.message.reply_text("–ê–¥–µ–≥–µ–Ω–¥–µ –¥–µ“£–≥—ç—ç–ª –∫–æ—ë–±—É–∑: /setlevel")
        return
    now = time.time()
    if now - u["last_lesson_ts"] < 10:
        await update.message.reply_text("–ë–∏—Ä –∞–∑ –∫“Ø—Ç”© —Ç—É—Ä—É“£—É–∑‚Ä¶ –º—É—Ä–¥–∞–≥—ã ”©—Ç“Ø–Ω“Ø—á –∏—à—Ç–µ–ª“Ø“Ø–¥”©.")
        return

    await update.message.reply_text("–ö—ã—Å–∫–∞ –∫–∏—Ä–∏—à —Å–∞–±–∞–∫ –¥–∞—è—Ä–¥–∞–ª—ã–ø –∂–∞—Ç–∞—Ç‚Ä¶")
    intro = await build_intro_lesson(u["level"])
    await update.message.reply_text(intro)

    task, key = await build_task(u["level"], u["goals"])
    u["pending_task"] = {"task": task, "key": key}
    u["last_lesson_ts"] = now
    save_db(DB)

    await update.message.reply_text(
        f"*–°–∏–∑–¥–∏–Ω —Ç–∞–ø—à—ã—Ä–º–∞“£—ã–∑ (EN):*\n{task}\n\n–ñ–æ–æ–±—É“£—É–∑–¥—É —É—à—É–ª —á–∞—Ç–∫–∞ –∂–∞–∑—ã“£—ã–∑ (–±–∏—Ä –±–∏–ª–¥–∏—Ä“Ø“Ø).",
        parse_mode="Markdown"
    )
    # –º–µ–Ω—é
    await update.message.reply_text(menu_text(u), parse_mode="Markdown")

async def repeat_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = userc(update.effective_user.id)
    if u.get("pending_task"):
        await update.message.reply_text(
            f"*–ê–∫—ã—Ä–∫—ã —Ç–∞–ø—à—ã—Ä–º–∞ (EN):*\n{u['pending_task']['task']}",
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text("–ê–∫—ã—Ä–∫—ã —Ç–∞–ø—à—ã—Ä–º–∞ —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫. /lesson –¥–µ–ø –∂–∞“£—ã —Å–∞–±–∞–∫ –∞–ª—ã“£—ã–∑.")
    await update.message.reply_text(menu_text(u), parse_mode="Markdown")

async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    DB[str(update.effective_user.id)] = {
        "level": None, "goals": [], "streak": 0,
        "last_lesson_ts": 0, "pending_task": None, "history": []
    }
    save_db(DB)
    await update.message.reply_text("–ú–∞–∞–ª—ã–º–∞—Ç—ã“£—ã–∑ —Ç–∞–∑–∞–ª–∞–Ω–¥—ã. /start –¥–µ–ø –∫–∞–π—Ä–∞ –±–∞—à—Ç–∞“£—ã–∑.")
    await update.message.reply_text(menu_text(userc(update.effective_user.id)), parse_mode="Markdown")

# -------------------- –¢–µ–∫—Å—Ç –±–∏–ª–¥–∏—Ä“Ø“Ø–ª”©—Ä --------------------
ALLOWED_WORDS = {"hello", "hi", "ok", "thanks", "thank you"}  # –º–∞–π–¥–∞ —Ä–µ–∞–∫—Ü–∏—è–≥–∞ —É—Ä—É–∫—Å–∞—Ç

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    u = userc(uid)
    txt = (update.message.text or "").strip()

    # –ú–∞–∫—Å–∞—Ç—Ç–∞—Ä–¥—ã –∫–∞–±—ã–ª –∞–ª—É—É
    if context.user_data.get("awaiting_goals"):
        goals = [g.strip() for g in txt.split(",") if g.strip()]
        u["goals"] = goals
        context.user_data["awaiting_goals"] = False
        save_db(DB)
        await update.message.reply_text(
            f"–ú–∞–∫—Å–∞—Ç—Ç–∞—Ä —Å–∞–∫—Ç–∞–ª–¥—ã: {', '.join(goals) if goals else '–∂–æ–∫'}. –≠–º–∏ /lesson –¥–µ–ø –±–∞—à—Ç–∞—Å–∞“£—ã–∑ –±–æ–ª–æ—Ç."
        )
        await update.message.reply_text(menu_text(u), parse_mode="Markdown")
        return

    # –¢–∞–ø—à—ã—Ä–º–∞–≥–∞ –∂–æ–æ–ø –∫–µ–ª–¥–∏–±–∏?
    if u.get("pending_task"):
        task = u["pending_task"]["task"]
        key = u["pending_task"]["key"]
        await update.message.reply_text("–ñ–æ–æ–±—É“£—É–∑ —Ç–µ–∫—à–µ—Ä–∏–ª–∏–ø –∂–∞—Ç–∞—Ç‚Ä¶")
        fb = await check_answer(u["level"], task, key, txt)
        u["pending_task"] = None
        u["streak"] = int(u.get("streak", 0)) + 1
        save_db(DB)
        await update.message.reply_text(fb)
        await update.message.reply_text(menu_text(u), parse_mode="Markdown")
        return

    # –≠—Ä–∫–∏–Ω —Ç–µ–∫—Å—Ç: –≥–∞–Ω–∞ –æ–∫—É—É —Ç—É—É—Ä–∞–ª—É—É —Å—É—Ä–æ–æ–ª–æ—Ä–≥–æ —Ç“Ø—à“Ø–Ω–¥“Ø—Ä–º”© (–±–∞—à–∫–∞ —Ç–µ–º–∞–ª–∞—Ä–≥–∞ –±–∞—Ä–±–∞–π–±—ã–∑)
    if any(cmd in txt.lower() for cmd in ["/", "setlevel", "lesson", "goals", "menu", "reset", "repeat"]) \
       or txt.lower() in ALLOWED_WORDS:
        # –∂”©–Ω –≥–∞–Ω–∞ –º–µ–Ω—é —ç—Å–∏“£–∏–∑–≥–µ —Å–∞–ª–∞–π—ã–Ω:
        await update.message.reply_text(menu_text(u), parse_mode="Markdown")
        return

    # –ë–æ–ª–±–æ—Å–æ ‚Äî –∫—ã—Å–∫–∞ —ç—Å–∫–µ—Ä—Ç–º–µ
    await update.message.reply_text(
        "–ë—É–ª –±–æ—Ç –∞–Ω–≥–ª–∏—Å —Ç–∏–ª–∏–Ω “Ø–π—Ä”©—Ç”©—Ç. –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä–¥—ã –∫–æ–ª–¥–æ–Ω—É“£—É–∑: /menu\n"
        "–ñ–∞“£—ã —Å–∞–±–∞–∫ “Ø—á“Ø–Ω: /lesson"
    )
    await update.message.reply_text(menu_text(u), parse_mode="Markdown")

# -------------------- main --------------------
def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token or not OPENAI_API_KEY:
        print("‚ùå .env –∏—á–∏–Ω–¥–µ TELEGRAM_BOT_TOKEN –∂–µ OPENAI_API_KEY –∂–æ–∫")
        return

    app = ApplicationBuilder().token(token).build()

    # –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_cmd))
    app.add_handler(CommandHandler("setlevel", setlevel))
    app.add_handler(CommandHandler("goals", goals_cmd))
    app.add_handler(CommandHandler("lesson", lesson_cmd))
    app.add_handler(CommandHandler("repeat", repeat_cmd))
    app.add_handler(CommandHandler("reset", reset_cmd))

    # Callback'—Ç–∞—Ä
    app.add_handler(CallbackQueryHandler(on_level_pick, pattern=r"^level\|"))
    app.add_handler(CallbackQueryHandler(on_goals_yesno, pattern=r"^goals\|"))

    # –¢–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    print("‚úÖ Tutor bot is running. Press Ctrl+C to stop.")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
